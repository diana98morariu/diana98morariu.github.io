{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","components/Home.js","components/About.js","components/Contact.js","components/Error.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","text","name","placeholder","Weather","city","country","temperature","humidity","description","icon","src","alt","error","API_KEY","Home","state","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","this","React","Component","About","Contact","Error","Navigation","to","style","color","textDecoration","textTransform","padding","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mTASeA,EAPA,kBACX,6BACI,wBAAIC,UAAU,0BAAd,eACA,uBAAGA,UAAU,6BAAb,qDCIQC,EAPH,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iD,gBC4BQC,EA9BA,SAAAN,GAAK,OACjB,yBAAKF,UAAU,iBAEPE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,IAA6B,kBAAC,IAAD,MAA7B,aAC3B,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMO,KAAzC,KAAiDP,EAAMQ,UAI3DR,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,IAA6B,kBAAC,IAAD,MAA7B,gBACjB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMS,YAAzC,UAIJT,EAAMU,UAAY,uBAAGZ,UAAU,gBAAb,IAA6B,kBAAC,IAAD,MAA7B,aACd,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMU,SAAzC,MAIJV,EAAMW,aAAeX,EAAMY,MAAQ,uBAAGd,UAAU,gBAAb,IAA6B,kBAAC,IAAD,MAA7B,eAC/B,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMW,YACrC,yBAAKE,IAAG,0CAAsCb,EAAMY,KAA5C,QAAwDE,IAAI,kBAK5Ed,EAAMe,OAAS,uBAAGjB,UAAU,kBAAkBE,EAAMe,SCvB1DC,EAAU,mCA2EDC,E,2MAxEbC,MAAQ,CACNT,YAAa,GACbF,KAAM,GACNC,QAAS,GACTE,SAAU,GACVC,YAAa,GACbC,KAAM,GACNG,MAAO,I,EAETb,W,uCAAa,WAAOiB,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,MAC9BhB,EAAUW,EAAEG,OAAOC,SAASf,QAAQgB,MAH/B,SAIYC,MAAM,qDAAD,OAAsDlB,EAAtD,YAA8DC,EAA9D,kBAA+EQ,EAA/E,kBAJjB,cAILU,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAOPrB,GAAQC,GACVqB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZtB,YAAamB,EAAKI,KAAKC,KACvB1B,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKM,IAAI1B,QAClBE,SAAUkB,EAAKI,KAAKtB,SACpBC,YAAaiB,EAAKO,QAAQ,GAAGxB,YAC7BC,KAAMgB,EAAKO,QAAQ,GAAGvB,KACtBG,MAAO,MAGP,EAAKgB,SAAS,CACZtB,YAAa,GACbF,KAAM,GACNC,QAAS,GACTE,SAAU,GACVC,YAAa,GACbC,KAAM,GACNG,MAAO,4BA1BF,4C,8HA+BX,OACI,6BACI,yBAAKjB,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,4BACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAAMI,WAAYkC,KAAKlC,aACvB,kBAAC,EAAD,CACIO,YAAa2B,KAAKlB,MAAMT,YACxBF,KAAM6B,KAAKlB,MAAMX,KACjBC,QAAS4B,KAAKlB,MAAMV,QACpBE,SAAU0B,KAAKlB,MAAMR,SACrBC,YAAayB,KAAKlB,MAAMP,YAAaC,KAAMwB,KAAKlB,MAAMN,KACtDG,MAAOqB,KAAKlB,MAAMH,kB,GA1DnCsB,IAAMC,WCIVC,EAVD,WACV,OACI,yBAAKzC,UAAU,WACX,yBAAKA,UAAU,2BACX,uDCOD0C,EAXC,WACZ,OACI,yBAAK1C,UAAU,WACX,yBAAKA,UAAU,2BACX,qDACA,4DCGD2C,EARD,WACV,OACI,6BACI,2DCQGC,EAVI,WACf,OACI,yBAAK5C,UAAU,cACX,kBAAC,IAAD,CAAS6C,GAAG,IAAIC,MAAO,CAAEC,MAAO,QAASC,eAAgB,OAAQC,cAAe,YAAaC,QAAS,SAAtG,QACA,kBAAC,IAAD,CAASL,GAAG,SAASC,MAAO,CAAEC,MAAO,QAASC,eAAgB,OAAQC,cAAe,YAAaC,QAAS,SAA3G,SACA,kBAAC,IAAD,CAASL,GAAG,WAAWC,MAAO,CAAEC,MAAO,QAASC,eAAgB,OAAQC,cAAe,YAAaC,QAAS,SAA7G,aCmBGC,E,iLAhBX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,KAAK,IAAIC,UAAWlC,EAAMmC,OAAK,IACvC,kBAAC,IAAD,CAAQF,KAAK,SAASC,UAAWZ,IACjC,kBAAC,IAAD,CAAQW,KAAK,WAAWC,UAAWX,IACnC,kBAAC,IAAD,CAAQW,UAAWV,W,GAVbJ,IAAMC,WCGJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLc,QAAQd,MAAMA,EAAMsD,c","file":"static/js/main.9c737803.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather now</h1>\r\n        <p className=\"title-container__subtitle\">Precise weather info from anywhere in the world</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input text=\"text\" name=\"city\" placeholder=\"City...\"></input>\r\n        <input text=\"text\" name=\"country\" placeholder=\"Country...\"></input>\r\n        <button>Get Weather</button>\r\n    </form>\r\n);\r\n export default Form;","import React from \"react\";\r\nimport { MdLocationOn } from \"react-icons/md\";\r\nimport { WiHumidity, WiThermometer, WiDaySunny } from \"react-icons/wi\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        {\r\n            props.city && props.country && <p className=\"weather__key\"> <MdLocationOn /> Location: \r\n                <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.temperature && <p className=\"weather__key\"> <WiThermometer /> Temperature: \r\n                <span className=\"weather__value\"> {props.temperature}Â°C</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.humidity && <p className=\"weather__key\"> <WiHumidity /> Humidity: \r\n                <span className=\"weather__value\"> {props.humidity}%</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.description && props.icon && <p className=\"weather__key\"> <WiDaySunny /> Conditions: \r\n                <span className=\"weather__value\"> {props.description} \r\n                    <img src ={`http://openweathermap.org/img/w/${props.icon}.png`} alt=\"weather img\"></img>\r\n                </span>\r\n            </p>\r\n        }\r\n        {\r\n            props.error && <p className=\"weather__error\">{props.error}</p>\r\n        }\r\n    </div>\r\n);\r\n\r\n export default Weather;","import React from \"react\";\r\n\r\nimport Titles from \"./Titles\";\r\nimport Form from \"./Form\";\r\nimport Weather from \"./Weather\";\r\n\r\nconst API_KEY = \"011407961caec553c4fdd3100af19095\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    temperature: \"\",\r\n    city: \"\",\r\n    country: \"\",\r\n    humidity: \"\",\r\n    description: \"\",\r\n    icon: \"\",\r\n    error: \"\"\r\n  }\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n    const data = await api_call.json();\r\n    \r\n    if (city && country) {\r\n      console.log(data);\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description: data.weather[0].description,\r\n        icon: data.weather[0].icon,\r\n        error: \"\"\r\n      })\r\n    } else {\r\n        this.setState({\r\n          temperature: \"\",\r\n          city: \"\",\r\n          country: \"\",\r\n          humidity: \"\",\r\n          description: \"\",\r\n          icon: \"\",\r\n          error: \"Please enter the values\"\r\n        })\r\n      }\r\n  }\r\n  render() {\r\n    return(\r\n        <div>\r\n            <div className=\"wrapper\">\r\n                <div className=\"main\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-5 title-container\">\r\n                                <Titles />\r\n                            </div>\r\n                            <div className=\"col-lg-7 form-container\">\r\n                                <Form getWeather={this.getWeather}/>\r\n                                <Weather \r\n                                    temperature={this.state.temperature}\r\n                                    city={this.state.city}\r\n                                    country={this.state.country}\r\n                                    humidity={this.state.humidity}\r\n                                    description={this.state.description} icon={this.state.icon}\r\n                                    error={this.state.error}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n        \r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nconst About = () =>{\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div className=\"about-contact-container\">\r\n                <p>This is a weather app</p>    \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;","import React from \"react\";\r\n\r\nconst Contact = () =>{\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div className=\"about-contact-container\">\r\n                <p>Email: diana@yahoo.com</p> \r\n                <p>Telephone: +45 23 23 45 56</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contact;","import React from \"react\";\r\n\r\nconst Error = () =>{\r\n    return(\r\n        <div>\r\n            <p>Error: Path does not exist</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Error;","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navigation = () => {\r\n    return(\r\n        <div className=\"navigation\">\r\n            <NavLink to=\"/\" style={{ color: 'white', textDecoration: 'none', textTransform: 'uppercase', padding: '10px'}} >Home</NavLink>\r\n            <NavLink to=\"/about\" style={{ color: 'white', textDecoration: 'none', textTransform: 'uppercase', padding: '10px'}} >About</NavLink>\r\n            <NavLink to=\"/Contact\" style={{ color: 'white', textDecoration: 'none', textTransform: 'uppercase', padding: '10px'}} >Contact</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigation;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Home from \"./components/Home\"\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\nimport Error from \"./components/Error\";\nimport Navigation from \"./components/Navigation\"; \n\nclass App extends React.Component {\n  render() {\n    return(\n      <BrowserRouter>\n        <div>\n          <Navigation />\n          <Switch>\n            <Route  path=\"/\" component={Home} exact />\n            <Route  path=\"/about\" component={About} />\n            <Route  path=\"/contact\" component={Contact} />\n            <Route  component={Error} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}